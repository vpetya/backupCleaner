/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package backupCleaner;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore("javax.management.*")
public class AppTest {
	
    @Test
    @PrepareForTest({DirectoryProcessorRecursiveTask.class, FileListProcessorTask.class})
    public void testApp() throws IOException {
    	
    	Random r = new Random();
    	Map<String,Path> pathMap = new HashMap<>();
    	
    	// Generate a few empty folders and .bak files with and without original file 
    	List<Path> firstLevel = new ArrayList<>();
    	for(int i = 0; i<1000; i++) {
    		Path di = Paths.get("d0", "d"+i);
    		pathMap.put("d0/d"+i, di);
			firstLevel.add(di);
			char c = (char)(r.nextInt(26) + 'a');
    		Path baki = Paths.get("d0", c+"f"+i+".bak");
			firstLevel.add(baki);
			pathMap.put("d0/f"+i+".bak", baki);
    		if(i%2==0) {
    			Path fi = Paths.get("d0", c+"f"+i+".doc");
    			pathMap.put("d0/f"+i+".doc", fi);
				firstLevel.add(fi);
    		}
    	}
    	Path d0 = Paths.get("d0");
    	pathMap.put("d0", d0);
    	
    	PowerMockito.mockStatic(Files.class);
    	
    	// Mock the Files.list for the base folder
		PowerMockito.when(Files.list(d0)).thenReturn(firstLevel.stream());
    	
    	// Custom mock implementation for the isDirectory
    	PowerMockito.when(Files.isDirectory(Mockito.any())).thenAnswer(new Answer<Boolean>() {

				@Override
				public Boolean answer(InvocationOnMock invocation) throws Throwable {
					Path p = (Path)invocation.getArgument(0);
					return !p.toString().contains("f");
				}
			});
    	
    	PowerMockito.mockStatic(Paths.class);
    	
    	// Serve the getPath from the path cache
    	PowerMockito.when(Paths.get(Mockito.any())).thenAnswer(new Answer<Path>() {

			@Override
			public Path answer(InvocationOnMock invocation) throws Throwable {
				String p = (String)invocation.getArgument(0);
				return pathMap.get(p);
			}
		});
    	
        App.cleanFolder("d0");
        
        // https://github.com/powermock/powermock/issues/888
        // PowerMockito.verifyStatic(Files.class, Mockito.times(1500));
        // Files.delete(Mockito.any());
    }
}
